{"version":3,"sources":["file:///C:/GitHub/cocos-misapat/assets/animations/lion/SpineController.ts.ts"],"names":["_decorator","Component","Node","UITransform","Prefab","instantiate","Vec3","sp","SocketManager","ccclass","property","SpineController","Skeleton","onLoad","uiTransform","getComponent","addComponent","setContentSize","setAnchorPoint","node","on","EventType","TOUCH_END","onSpineClicked","spine","setAnimation","setCompleteListener","onAnimationComplete","bind","console","warn","event","log","socketManager","currentEnergy","getCurrentEnergy","addAnimation","onTap","tapPosition","getUILocation","spawnFloatingText","showMessage","entry","trackIndex","floatingTextPrefab","canvas","scene","getChildByName","canvasUITransform","canvasSize","contentSize","localPosX","x","width","localPosY","y","height","localPos","floatingText","setParent","setPosition","getPosition"],"mappings":"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","sourcesContent":["// assets/animations/lion/SpineController.ts\r\n\r\nimport { _decorator, Component, Node, EventTouch, UITransform, Prefab, instantiate, Vec2, Vec3, sp } from 'cc';\r\nimport { SocketManager } from '../../scripts/SocketManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SpineController')\r\nexport class SpineController extends Component {\r\n    @property(sp.Skeleton)\r\n    spine: sp.Skeleton = null;\r\n\r\n    @property(SocketManager)\r\n    socketManager: SocketManager = null;\r\n\r\n    @property(Prefab)\r\n    floatingTextPrefab: Prefab = null; // Ссылка на префаб FloatingText\r\n\r\n    onLoad() {\r\n        // Убедимся, что компонент UITransform присутствует\r\n        let uiTransform = this.getComponent(UITransform);\r\n        if (!uiTransform) {\r\n            uiTransform = this.addComponent(UITransform);\r\n        }\r\n        // Устанавливаем размер контента (замените на реальные размеры вашей анимации)\r\n        uiTransform.setContentSize(4000, 3000);\r\n        uiTransform.setAnchorPoint(0.553265, 0.004952);\r\n\r\n        // Добавляем обработчик на событие касания непосредственно на узел Spine-анимации\r\n        this.node.on(Node.EventType.TOUCH_END, this.onSpineClicked, this);\r\n\r\n        if (this.spine) {\r\n            // Устанавливаем основную анимацию на треке 0\r\n            this.spine.setAnimation(0, 'Основная', true);\r\n\r\n            // Устанавливаем слушатель завершения анимации\r\n            this.spine.setCompleteListener(this.onAnimationComplete.bind(this));\r\n        } else {\r\n            console.warn('Spine компонент не установлен в SpineController.');\r\n        }\r\n    }\r\n\r\n    onSpineClicked(event: EventTouch) {\r\n        console.log('Spine animation clicked');\r\n\r\n        // Проверяем, установлен ли SocketManager\r\n        if (this.socketManager) {\r\n            const currentEnergy = this.socketManager.getCurrentEnergy();\r\n\r\n            // Проверяем, достаточно ли энергии для тапа (13 и больше)\r\n            if (currentEnergy >= 13) {\r\n                // Если энергии достаточно, выполняем анимацию и отправляем событие тапа\r\n\r\n                if (this.spine) {\r\n                    // Устанавливаем анимацию 'Нажатие' на треке 1\r\n                    this.spine.setAnimation(1, 'Нажатие', false);\r\n                    // Добавляем возврат к основной анимации после завершения 'Нажатие'\r\n                    this.spine.addAnimation(1, 'Основная', true, 0);\r\n                }\r\n\r\n                // Вызываем метод onTap() из SocketManager\r\n                console.log('Calling socketManager.onTap()');\r\n                this.socketManager.onTap();\r\n\r\n                // Создаём и анимируем всплывающий текст\r\n                const tapPosition = event.getUILocation(); // Vec2\r\n                console.log('Tap Position (UILocation):', tapPosition);\r\n                this.spawnFloatingText(tapPosition);\r\n            } else {\r\n                // Если энергии недостаточно, выводим сообщение и не запускаем анимацию\r\n                console.log('Not enough energy to tap');\r\n                this.socketManager.showMessage('Не хватает энергии для тапа.', 'warning');\r\n            }\r\n        } else {\r\n            console.warn('SocketManager не установлен в SpineController.');\r\n        }\r\n    }\r\n\r\n    onAnimationComplete(entry: sp.spine.TrackEntry) {\r\n        if (entry && entry.trackIndex === 1) {\r\n            // После завершения анимации 'Нажатие' возвращаемся к 'Основная'\r\n            this.spine.setAnimation(1, 'Основная', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Создаёт и анимирует всплывающий текст \"+13\" в месте тапа\r\n     * @param tapPosition Позиция тапа в координатах экрана (Vec2)\r\n     */\r\n    spawnFloatingText(tapPosition: Vec2) {\r\n        if (!this.floatingTextPrefab) {\r\n            console.warn('floatingTextPrefab не установлен в SpineController.');\r\n            return;\r\n        }\r\n\r\n        // Получаем Canvas\r\n        const canvas = this.node.scene.getChildByName('Canvas');\r\n        if (!canvas) {\r\n            console.warn('Canvas не найден.');\r\n            return;\r\n        }\r\n\r\n        // Получаем размер Canvas\r\n        const canvasUITransform = canvas.getComponent(UITransform);\r\n        if (!canvasUITransform) {\r\n            console.warn('UITransform не найден на Canvas.');\r\n            return;\r\n        }\r\n        const canvasSize = canvasUITransform.contentSize;\r\n        console.log('Canvas Size:', canvasSize);\r\n\r\n        // Преобразуем позицию тапа из экранных координат в локальные координаты Canvas\r\n        const localPosX = tapPosition.x - (canvasSize.width / 2);\r\n        const localPosY = tapPosition.y - (canvasSize.height / 2);\r\n        const localPos = new Vec3(localPosX, localPosY, 100);\r\n        console.log('Converted Local Position:', localPos);\r\n\r\n        // Создаём экземпляр префаба\r\n        const floatingText = instantiate(this.floatingTextPrefab);\r\n        floatingText.setParent(canvas); // Устанавливаем родителем Canvas\r\n\r\n        // Устанавливаем позицию всплывающего текста относительно Canvas\r\n        floatingText.setPosition(localPos);\r\n        console.log('FloatingText Position Set To:', floatingText.getPosition());\r\n\r\n        // Запускаем анимацию (скрипт FloatingText.ts уже запускает анимацию в методе start)\r\n    }\r\n}\r\n"]}