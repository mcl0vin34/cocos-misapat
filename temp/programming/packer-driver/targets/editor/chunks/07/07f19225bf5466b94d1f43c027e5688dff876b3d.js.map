{"version":3,"sources":["file:///C:/GitHub/cocos-misapat/assets/scripts/LeadersPage.ts"],"names":["_decorator","Component","ScrollView","Prefab","instantiate","Label","SocketManager","ccclass","property","LeaderBoardPage","start","instance","console","error","userId","getUserId","fetchLeaders","response","fetch","apiBaseUrl","ok","status","warn","Error","data","json","log","populateLeadersList","top50","currentUser","displayCurrentUser","scrollView","scrollToTop","leaders","content","length","removeAllChildren","forEach","leader","index","rank","leaderItem","leaderItemPrefab","parent","labels","getComponentsInChildren","numberLabel","usernameLabel","coinsLabel","label","nodeName","node","name","string","username","formatCoins","coins","map","user","currentRankLabel","currentUsernameLabel","currentCoinsLabel","millions","Math","round","toLocaleString"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAGEA,MAAAA,U,OAAAA,U;AACAC,MAAAA,S,OAAAA,S;AACAC,MAAAA,U,OAAAA,U;AACAC,MAAAA,M,OAAAA,M;AACAC,MAAAA,W,OAAAA,W;AACAC,MAAAA,K,OAAAA,K;;AAGOC,MAAAA,a,iBAAAA,a;;;;;mFAXT;;;;;AAWiD;OAC3C;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U,GAE9B;AAQA;;iCAOaS,e,WADZF,OAAO,CAAC,iBAAD,C,UAELC,QAAQ,CAACN,UAAD,C,UAGRM,QAAQ,CAACL,MAAD,C,UAQRK,QAAQ,CAACH,KAAD,C,UAGRG,QAAQ,CAACH,KAAD,C,UAGRG,QAAQ,CAACH,KAAD,C,2BAnBX,MACaI,eADb,SACqCR,SADrC,CAC+C;AAAA;AAAA;;AAAA;;AAAA;;AAO7C;AACA;AACA;AAEA;AAX6C;;AAAA;;AAAA;;AAAA;AAAA;;AAwB7C;AACA;AAEAS,QAAAA,KAAK,GAAG;AACN;AACA,cAAI,CAAC;AAAA;AAAA,8CAAcC,QAAnB,EAA6B;AAC3BC,YAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd,EAD2B,CAE3B;;AACA;AACD,WANK,CAQN;;;AACA,gBAAMC,MAAM,GAAG;AAAA;AAAA,8CAAcH,QAAd,CAAuBI,SAAvB,EAAf;;AACA,cAAI,CAACD,MAAL,EAAa;AACXF,YAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd,EADW,CAEX;;AACA;AACD;;AAED,eAAKG,YAAL;AACD;AAED;AACF;AACA;;;AACoB,cAAZA,YAAY,GAAG;AACnB;AACA,gBAAMF,MAAM,GAAG;AAAA;AAAA,8CAAcH,QAAd,CAAuBI,SAAvB,EAAf;;AACA,cAAI,CAACD,MAAL,EAAa;AACXF,YAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd,EADW,CAEX;;AACA;AACD;;AAED,cAAI;AACF,kBAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKC,UAAW,WAAUL,MAAO,EAArC,CAA5B;;AACA,gBAAI,CAACG,QAAQ,CAACG,EAAd,EAAkB;AAChB,kBAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACAT,gBAAAA,OAAO,CAACU,IAAR,CAAa,uBAAb;AACA;AACD;;AACD,oBAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,kBAAMC,IAAiB,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAhC;AACAb,YAAAA,OAAO,CAACc,GAAR,CAAY,2BAAZ,EAAyCF,IAAzC,EAXE,CAaF;AACA;;AAEA,iBAAKG,mBAAL,CAAyBH,IAAI,CAACI,KAA9B,EAhBE,CAkBF;;AACA,gBAAIJ,IAAI,CAACK,WAAT,EAAsB;AACpB,mBAAKC,kBAAL,CAAwBN,IAAI,CAACK,WAA7B;AACD,aArBC,CAuBF;;;AACA,gBAAI,KAAKE,UAAT,EAAqB;AACnB,mBAAKA,UAAL,CAAgBC,WAAhB,CAA4B,CAA5B,EAA+B,KAA/B,EADmB,CAEnB;AACA;AACD;AACF,WA7BD,CA6BE,OAAOnB,KAAP,EAAc;AACdD,YAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd,EAAqDA,KAArD,EADc,CAEd;AACA;AACA;AACA;AACD;AACF;AAED;AACF;AACA;AACA;;;AACEc,QAAAA,mBAAmB,CAACM,OAAD,EAA6B;AAC9C,gBAAMC,OAAO,GAAG,KAAKH,UAAL,CAAgBG,OAAhC;AACAtB,UAAAA,OAAO,CAACc,GAAR,CAAY,kCAAZ,EAAgDO,OAAO,CAACE,MAAxD,EAAgE,UAAhE,EAF8C,CAI9C;;AACAD,UAAAA,OAAO,CAACE,iBAAR;AAEAH,UAAAA,OAAO,CAACI,OAAR,CAAgB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACjC3B,YAAAA,OAAO,CAACc,GAAR,CAAa,iBAAgBY,MAAM,CAACE,IAAK,GAAzC,EAA6CF,MAA7C;AACA,kBAAMG,UAAU,GAAGrC,WAAW,CAAC,KAAKsC,gBAAN,CAA9B;AACAD,YAAAA,UAAU,CAACE,MAAX,GAAoBT,OAApB,CAHiC,CAKjC;;AACA,kBAAMU,MAAM,GAAGH,UAAU,CAACI,uBAAX,CAAmCxC,KAAnC,CAAf;AACAO,YAAAA,OAAO,CAACc,GAAR,CAAa,SAAQkB,MAAM,CAACT,MAAO,kCAAnC;AAEA,gBAAIW,WAAkB,GAAG,IAAzB;AACA,gBAAIC,aAAoB,GAAG,IAA3B;AACA,gBAAIC,UAAiB,GAAG,IAAxB;AAEAJ,YAAAA,MAAM,CAACP,OAAP,CAAgBY,KAAD,IAAW;AACxB,oBAAMC,QAAQ,GAAGD,KAAK,CAACE,IAAN,CAAWC,IAA5B;;AACA,kBAAIF,QAAQ,KAAK,aAAjB,EAAgC;AAC9B;AACAJ,gBAAAA,WAAW,GAAGG,KAAd;AACD,eAHD,MAGO,IAAIC,QAAQ,KAAK,eAAjB,EAAkC;AACvCH,gBAAAA,aAAa,GAAGE,KAAhB;AACD,eAFM,MAEA,IAAIC,QAAQ,KAAK,YAAjB,EAA+B;AACpCF,gBAAAA,UAAU,GAAGC,KAAb;AACD;AACF,aAVD;;AAYA,gBAAIH,WAAW,IAAIC,aAAf,IAAgCC,UAApC,EAAgD;AAC9CF,cAAAA,WAAW,CAACO,MAAZ,GAAsB,IAAGf,MAAM,CAACE,IAAK,EAArC;AACAO,cAAAA,aAAa,CAACM,MAAd,GAAuBf,MAAM,CAACgB,QAA9B;AACAN,cAAAA,UAAU,CAACK,MAAX,GAAoB,KAAKE,WAAL,CAAiBjB,MAAM,CAACkB,KAAxB,CAApB;AACA5C,cAAAA,OAAO,CAACc,GAAR,CACG,eAAcY,MAAM,CAACE,IAAK,eAAcF,MAAM,CAACgB,QAAS,YAAWhB,MAAM,CAACkB,KAAM,EADnF;AAGD,aAPD,MAOO;AACL5C,cAAAA,OAAO,CAACU,IAAR,CAAa,yDAAb;AACAV,cAAAA,OAAO,CAACc,GAAR,CACE,uBADF,EAEEkB,MAAM,CAACa,GAAP,CAAYR,KAAD,IAAWA,KAAK,CAACE,IAAN,CAAWC,IAAjC,CAFF;AAID;AACF,WAvCD;AAwCD;AAED;AACF;AACA;AACA;;;AACEtB,QAAAA,kBAAkB,CAAC4B,IAAD,EAAwB;AACxC,cAAI,KAAKC,gBAAT,EAA2B;AACzB,iBAAKA,gBAAL,CAAsBN,MAAtB,GAAgC,IAAGK,IAAI,CAAClB,IAAK,EAA7C;AACD,WAFD,MAEO;AACL5B,YAAAA,OAAO,CAACU,IAAR,CAAa,iDAAb;AACD;;AAED,cAAI,KAAKsC,oBAAT,EAA+B;AAC7B,iBAAKA,oBAAL,CAA0BP,MAA1B,GAAoC,GAAEK,IAAI,CAACJ,QAAS,EAApD;AACD,WAFD,MAEO;AACL1C,YAAAA,OAAO,CAACU,IAAR,CAAa,qDAAb;AACD;;AAED,cAAI,KAAKuC,iBAAT,EAA4B;AAC1B,iBAAKA,iBAAL,CAAuBR,MAAvB,GAAiC,GAAE,KAAKE,WAAL,CAAiBG,IAAI,CAACF,KAAtB,CAA6B,EAAhE;AACD,WAFD,MAEO;AACL5C,YAAAA,OAAO,CAACU,IAAR,CAAa,kDAAb;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEiC,QAAAA,WAAW,CAACC,KAAD,EAAwB;AACjC,cAAIA,KAAK,IAAI,OAAb,EAAwB;AACtB,kBAAMM,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAG,OAAnB,CAAjB;AACA,mBAAQ,GAAEM,QAAS,GAAnB;AACD,WAHD,MAGO;AACL,mBAAOC,IAAI,CAACC,KAAL,CAAWR,KAAX,EAAkBS,cAAlB,CAAiC,OAAjC,CAAP,CADK,CAC6C;AACnD;AACF;;AA3L4C,O;;;;;iBAEpB,I;;;;;;;iBAGE,I;;;;;;;iBAQD,I;;;;;;;iBAGI,I;;;;;;;iBAGH,I;;qFAE1BzD,Q;;;;;iBACoB,0C","sourcesContent":["// assets/scripts/LeaderBoard/LeaderBoardPage.ts\r\n\r\nimport {\r\n  _decorator,\r\n  Component,\r\n  ScrollView,\r\n  Prefab,\r\n  instantiate,\r\n  Label,\r\n  Color,\r\n} from \"cc\";\r\nimport { SocketManager } from \"./SocketManager\"; // Импортируем SocketManager\r\nconst { ccclass, property } = _decorator;\r\n\r\n// Интерфейс для Лидера\r\ninterface LeaderboardUser {\r\n  rank: number;\r\n  username: string;\r\n  coins: number;\r\n  isCurrentUser: boolean;\r\n}\r\n\r\n// Интерфейс для ответа API\r\ninterface ApiResponse {\r\n  top50: LeaderboardUser[];\r\n  currentUser: LeaderboardUser | null;\r\n}\r\n\r\n@ccclass(\"LeaderBoardPage\")\r\nexport class LeaderBoardPage extends Component {\r\n  @property(ScrollView)\r\n  scrollView: ScrollView = null;\r\n\r\n  @property(Prefab)\r\n  leaderItemPrefab: Prefab = null;\r\n\r\n  // Удаляем свойство totalLeadersLabel\r\n  // @property(Label)\r\n  // totalLeadersLabel: Label = null;\r\n\r\n  // Добавляем новые свойства для текущего игрока\r\n  @property(Label)\r\n  currentRankLabel: Label = null;\r\n\r\n  @property(Label)\r\n  currentUsernameLabel: Label = null;\r\n\r\n  @property(Label)\r\n  currentCoinsLabel: Label = null;\r\n\r\n  @property\r\n  apiBaseUrl: string = \"https://dev.simatap.ru/api/users/leaders\";\r\n\r\n  // Удаляем локальную переменную userId\r\n  // private userId: number = 777270195; // Замените на актуальный userId или получите его из других источников\r\n\r\n  start() {\r\n    // Проверяем, инициализирован ли SocketManager\r\n    if (!SocketManager.instance) {\r\n      console.error(\"SocketManager не инициализирован.\");\r\n      // Можно показать сообщение об ошибке пользователю\r\n      return;\r\n    }\r\n\r\n    // Получаем userId из SocketManager\r\n    const userId = SocketManager.instance.getUserId();\r\n    if (!userId) {\r\n      console.error(\"userId не установлен в SocketManager.\");\r\n      // Можно показать сообщение об ошибке пользователю\r\n      return;\r\n    }\r\n\r\n    this.fetchLeaders();\r\n  }\r\n\r\n  /**\r\n   * Получает список лидеров из API\r\n   */\r\n  async fetchLeaders() {\r\n    // Получаем userId из SocketManager\r\n    const userId = SocketManager.instance.getUserId();\r\n    if (!userId) {\r\n      console.error(\"userId не установлен в SocketManager.\");\r\n      // Можно показать сообщение об ошибке пользователю\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.apiBaseUrl}?userId=${userId}`);\r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          // Если топ-лидеров нет, можно скрыть список или показать сообщение\r\n          console.warn(\"Топ-лидеров пока нет.\");\r\n          return;\r\n        }\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data: ApiResponse = await response.json();\r\n      console.log(\"Fetched leaderboard data:\", data);\r\n\r\n      // Убираем строку с общим количеством лидеров\r\n      // this.totalLeadersLabel.string = `Топ-50 лидеров: ${data.top50.length}`;\r\n\r\n      this.populateLeadersList(data.top50);\r\n\r\n      // Отображаем информацию о текущем игроке\r\n      if (data.currentUser) {\r\n        this.displayCurrentUser(data.currentUser);\r\n      }\r\n\r\n      // Прокрутка ScrollView к началу после заполнения списка\r\n      if (this.scrollView) {\r\n        this.scrollView.scrollToTop(0, false);\r\n        // Альтернативный способ:\r\n        // this.scrollView.content.setPosition(new Vec3(0, 0, 0));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Ошибка при загрузке списка лидеров:\", error);\r\n      // Убираем строку с общим количеством лидеров и показываем ошибку\r\n      // if (this.totalLeadersLabel) {\r\n      //     this.totalLeadersLabel.string = 'Не удалось загрузить список лидеров.';\r\n      // }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Заполняет ScrollView списком лидеров\r\n   * @param leaders Список лидеров\r\n   */\r\n  populateLeadersList(leaders: LeaderboardUser[]) {\r\n    const content = this.scrollView.content;\r\n    console.log(\"Populating leaderboard list with\", leaders.length, \"leaders.\");\r\n\r\n    // Очистить предыдущие элементы\r\n    content.removeAllChildren();\r\n\r\n    leaders.forEach((leader, index) => {\r\n      console.log(`Adding leader ${leader.rank}:`, leader);\r\n      const leaderItem = instantiate(this.leaderItemPrefab);\r\n      leaderItem.parent = content;\r\n\r\n      // Получить все Label компоненты в leaderItem\r\n      const labels = leaderItem.getComponentsInChildren(Label);\r\n      console.log(`Found ${labels.length} Label components in LeaderItem.`);\r\n\r\n      let numberLabel: Label = null;\r\n      let usernameLabel: Label = null;\r\n      let coinsLabel: Label = null;\r\n\r\n      labels.forEach((label) => {\r\n        const nodeName = label.node.name;\r\n        if (nodeName === \"NumberLabel\") {\r\n          // Используем NumberLabel\r\n          numberLabel = label;\r\n        } else if (nodeName === \"UsernameLabel\") {\r\n          usernameLabel = label;\r\n        } else if (nodeName === \"CoinsLabel\") {\r\n          coinsLabel = label;\r\n        }\r\n      });\r\n\r\n      if (numberLabel && usernameLabel && coinsLabel) {\r\n        numberLabel.string = `#${leader.rank}`;\r\n        usernameLabel.string = leader.username;\r\n        coinsLabel.string = this.formatCoins(leader.coins);\r\n        console.log(\r\n          `Set Number: ${leader.rank}, Username: ${leader.username}, Coins: ${leader.coins}`\r\n        );\r\n      } else {\r\n        console.warn(\"Не удалось найти один из Label компонентов в LeaderItem\");\r\n        console.log(\r\n          \"Найденные Label узлы:\",\r\n          labels.map((label) => label.node.name)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Отображает информацию о текущем игроке в отдельных метках\r\n   * @param user Информация о текущем игроке\r\n   */\r\n  displayCurrentUser(user: LeaderboardUser) {\r\n    if (this.currentRankLabel) {\r\n      this.currentRankLabel.string = `#${user.rank}`;\r\n    } else {\r\n      console.warn(\"currentRankLabel не назначен в LeaderBoardPage.\");\r\n    }\r\n\r\n    if (this.currentUsernameLabel) {\r\n      this.currentUsernameLabel.string = `${user.username}`;\r\n    } else {\r\n      console.warn(\"currentUsernameLabel не назначен в LeaderBoardPage.\");\r\n    }\r\n\r\n    if (this.currentCoinsLabel) {\r\n      this.currentCoinsLabel.string = `${this.formatCoins(user.coins)}`;\r\n    } else {\r\n      console.warn(\"currentCoinsLabel не назначен в LeaderBoardPage.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Форматирует количество монет.\r\n   * Если монет >= 1,000,000, отображает в миллионах с буквой \"M\" без пробела.\r\n   * Иначе, отображает количество монет с разделителями тысяч и округляет до целого числа.\r\n   * @param coins Количество монет\r\n   * @returns Отформатированная строка\r\n   */\r\n  formatCoins(coins: number): string {\r\n    if (coins >= 1_000_000) {\r\n      const millions = Math.round(coins / 1_000_000);\r\n      return `${millions}M`;\r\n    } else {\r\n      return Math.round(coins).toLocaleString(\"ru-RU\"); // Указываем локаль для правильного форматирования\r\n    }\r\n  }\r\n}\r\n"]}