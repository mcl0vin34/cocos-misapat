{"version":3,"sources":["file:///D:/simatap_frontend/assets/scripts/SocketManager.ts"],"names":["_decorator","Component","Label","Color","ProgressBar","IncomeManager","PassiveIncomeModal","ccclass","property","SocketManager","socket","userId","maxEnergy","currentEnergy","currentBoosts","maxBoosts","currentCoins","start","coinsLabel","energyProgressBar","energyValueLabel","messagesLabel","boostsLabel","console","error","incomeManager","incomeManagerNode","node","scene","getChildByName","getComponent","warn","autoConnect","showUserInfo","checkPassiveIncome","onDestroy","disconnect","io","transports","secure","rejectUnauthorized","on","emit","fetchInitialData","showMessage","data","log","energy_left","undefined","updateEnergy","Math","round","boosts_left","updateBoosts","coins","updateCoins","message","newEnergyValue","response","fetch","ok","Error","status","json","string","toLocaleString","income","fetchPassiveIncome","passiveIncomeModal","show","errorText","text","passive_income_earned","boostsLeft","max","min","progress","active","type","color","getCurrentEnergy","getCurrentBoosts","activateBoost","connected","onTap"],"mappings":"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","sourcesContent":["// assets/scripts/SocketManager.ts\r\n\r\nimport { _decorator, Component, Label, Color, ProgressBar } from 'cc';\r\nimport { IncomeManager } from './IncomeManager'; // Убедитесь, что путь корректный\r\nimport { PassiveIncomeModal } from './PassiveIncomeModal'; // Импортируем модальное окно пассивного дохода\r\ndeclare const io: any; // Глобальная переменная для socket.io\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SocketManager')\r\nexport class SocketManager extends Component {\r\n    @property(Label)\r\n    coinsLabel: Label = null;\r\n\r\n    @property(ProgressBar)\r\n    energyProgressBar: ProgressBar = null;\r\n\r\n    @property(Label)\r\n    energyValueLabel: Label = null;\r\n\r\n    @property(Label)\r\n    messagesLabel: Label = null;\r\n\r\n    @property(Label)\r\n    boostsLabel: Label = null; // Свойство для отображения количества бустов\r\n\r\n    @property(IncomeManager)\r\n    incomeManager: IncomeManager = null; // Ссылка на IncomeManager\r\n\r\n    @property(PassiveIncomeModal)\r\n    passiveIncomeModal: PassiveIncomeModal = null; // Ссылка на компонент модального окна\r\n\r\n    private socket: any = null;\r\n    private userId: number = 777270195; // Замените на нужный userId\r\n    private maxEnergy: number = 2000; // Максимальное значение энергии\r\n    private currentEnergy: number = 0; // Текущее значение энергии\r\n    private currentBoosts: number = 0; // Текущее количество бустов\r\n    private maxBoosts: number = 6; // Максимальное количество бустов\r\n    private currentCoins: number = 0; // Текущее количество монет\r\n\r\n    start() {\r\n        if (!this.coinsLabel || !this.energyProgressBar || !this.energyValueLabel || !this.messagesLabel || !this.boostsLabel) {\r\n            console.error('Не все необходимые компоненты назначены в SocketManager.');\r\n            return;\r\n        }\r\n\r\n        // Если incomeManager не установлен в инспекторе, пытаемся найти его в сцене\r\n        if (!this.incomeManager) {\r\n            const incomeManagerNode = this.node.scene.getChildByName('IncomeManagerNode'); // Замените на реальное имя узла\r\n            if (incomeManagerNode) {\r\n                this.incomeManager = incomeManagerNode.getComponent(IncomeManager);\r\n            } else {\r\n                console.warn('IncomeManager не найден в сцене.');\r\n            }\r\n        }\r\n\r\n        this.autoConnect();\r\n        this.showUserInfo(false);\r\n\r\n        // Проверяем пассивный доход\r\n        this.checkPassiveIncome();\r\n    }\r\n\r\n    onDestroy() {\r\n        if (this.socket) {\r\n            this.socket.disconnect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Автоматически подключается к серверу Socket.IO с фиксированным userId\r\n     */\r\n    autoConnect() {\r\n        try {\r\n            this.socket = io('https://dev.simatap.ru', {\r\n                transports: ['websocket'],\r\n                secure: true,\r\n                rejectUnauthorized: false\r\n            });\r\n\r\n            this.socket.on('connect', () => {\r\n                this.socket.emit('register', { userId: this.userId });\r\n                this.showUserInfo(true);\r\n\r\n                // Получаем начальные данные\r\n                this.fetchInitialData();\r\n            });\r\n\r\n            this.socket.on('disconnect', () => {\r\n                this.showMessage('Отключено от сервера.', 'danger');\r\n                this.showUserInfo(false);\r\n            });\r\n\r\n            this.socket.on('energyUpdated', (data: any) => {\r\n                console.log('Received energyUpdated event:', data);\r\n                if (data.energy_left !== undefined) {\r\n                    this.updateEnergy(Math.round(data.energy_left));\r\n                } else {\r\n                    console.warn('energyUpdated event received, but energy_left is undefined.');\r\n                }\r\n            });\r\n\r\n            // Обработчик обновления количества бустов\r\n            this.socket.on('boostsUpdated', (data: any) => {\r\n                console.log('Received boostsUpdated event:', data);\r\n                if (data.boosts_left !== undefined) {\r\n                    this.updateBoosts(data.boosts_left);\r\n                } else {\r\n                    console.warn('boostsUpdated event received, but boosts_left is undefined.');\r\n                }\r\n            });\r\n\r\n            // Обработчик события обновления монет (если сервер отправляет такое событие)\r\n            this.socket.on('coinsUpdated', (data: any) => {\r\n                console.log('Received coinsUpdated event:', data);\r\n                if (data.coins !== undefined) {\r\n                    this.updateCoins(Math.round(data.coins));\r\n                } else {\r\n                    console.warn('coinsUpdated event received, but coins is undefined.');\r\n                }\r\n            });\r\n\r\n            // Остальные обработчики событий\r\n\r\n            this.socket.on('tapError', (data: any) => {\r\n                this.showMessage(data.message, 'warning');\r\n            });\r\n\r\n            this.socket.on('registrationError', (data: any) => {\r\n                this.showMessage(data.message, 'danger');\r\n                this.showUserInfo(false);\r\n            });\r\n\r\n            this.socket.on('connect_error', (error: any) => {\r\n                this.showMessage('Ошибка подключения к серверу.', 'danger');\r\n            });\r\n\r\n            // Обработчик ответа на активацию буста\r\n            this.socket.on('boostActivated', (data: any) => {\r\n                console.log('Boost activation response:', data);\r\n                // Обновляем энергию, если сервер вернул новое значение\r\n                if (data.newEnergyValue !== undefined) {\r\n                    this.updateEnergy(Math.round(data.newEnergyValue));\r\n                }\r\n                // Обновление количества бустов будет обработано через событие 'boostsUpdated'\r\n            });\r\n\r\n            // Обработчик ошибки при активации буста\r\n            this.socket.on('boostError', (data: any) => {\r\n                console.error('Ошибка активации буста:', data.message);\r\n                // Ошибки при активации буста будут обработаны в BoostController\r\n            });\r\n\r\n        } catch (error) {\r\n            this.showMessage('Ошибка подключения к серверу.', 'danger');\r\n            console.error('Socket connection error:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Получает начальные данные с API и обновляет состояние\r\n     */\r\n    async fetchInitialData() {\r\n        try {\r\n            const response = await fetch(`https://dev.simatap.ru/api/users/${this.userId}`);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            console.log('API response:', data);\r\n\r\n            // Обновляем энергию\r\n            if (data.energy_left !== undefined) {\r\n                this.updateEnergy(Math.round(data.energy_left));\r\n                console.log(`Initial energy fetched: ${Math.round(data.energy_left)}`);\r\n            } else {\r\n                console.warn('Energy data not found in API response.');\r\n            }\r\n\r\n            // Обновляем количество бустов\r\n            if (data.boosts_left !== undefined) {\r\n                this.updateBoosts(data.boosts_left);\r\n                console.log(`Initial boosts fetched: ${data.boosts_left}`);\r\n            } else {\r\n                console.warn('Boosts data not found in API response.');\r\n            }\r\n\r\n            // Если в ответе есть поле с монетами, обновляем его\r\n            if (data.coins !== undefined) {\r\n                this.updateCoins(Math.round(data.coins));\r\n                console.log(`Initial coins fetched: ${Math.round(data.coins)}`);\r\n            } else {\r\n                console.warn('Coins data not found in API response.');\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Error fetching initial data:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Обновляет количество монет и соответствующую метку.\r\n     * @param coins Новое количество монет.\r\n     */\r\n    updateCoins(coins: number) {\r\n        this.currentCoins = coins;\r\n        if (this.coinsLabel) {\r\n            this.coinsLabel.string = this.currentCoins.toLocaleString();\r\n        } else {\r\n            console.warn('coinsLabel не назначен в SocketManager.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Проверяет и обрабатывает пассивный доход\r\n     */\r\n    async checkPassiveIncome() {\r\n        const income = await this.fetchPassiveIncome();\r\n        if (income > 0) {\r\n            if (this.passiveIncomeModal) {\r\n                this.passiveIncomeModal.show(income);\r\n            } else {\r\n                console.warn('PassiveIncomeModal не назначен в SocketManager.');\r\n            }\r\n\r\n            // Обновляем количество монет\r\n            this.currentCoins += income;\r\n            this.updateCoins(this.currentCoins);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Получает пассивный доход с сервера и возвращает его\r\n     */\r\n    async fetchPassiveIncome(): Promise<number> {\r\n        try {\r\n            const response = await fetch(`https://dev.simatap.ru/api/passiveIncome?userId=${this.userId}`);\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);\r\n            }\r\n            const data = await response.json();\r\n\r\n            console.log('Passive income API response:', data);\r\n\r\n            if ('passive_income_earned' in data) {\r\n                const income = Math.round(data.passive_income_earned);\r\n                console.log(`Пассивный доход получен: ${income}`);\r\n                return income;\r\n            } else if ('message' in data) {\r\n                console.log(`Сообщение от сервера: ${data.message}`);\r\n                return 0;\r\n            } else {\r\n                console.warn('Неизвестный формат ответа от сервера:', data);\r\n                return 0;\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при получении пассивного дохода:', error);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Обновляет количество бустов и соответствующую метку.\r\n     * @param boostsLeft Текущее количество оставшихся бустов.\r\n     */\r\n    updateBoosts(boostsLeft: number) {\r\n        this.currentBoosts = boostsLeft;\r\n        if (this.boostsLabel) {\r\n            this.boostsLabel.string = `${this.currentBoosts}/${this.maxBoosts}`;\r\n        } else {\r\n            console.warn('boostsLabel не назначен в SocketManager.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Обновляет прогресс-бар энергии и текстовую метку.\r\n     * @param currentEnergy Текущее значение энергии.\r\n     */\r\n    updateEnergy(currentEnergy: number) {\r\n        currentEnergy = Math.round(Math.max(0, Math.min(this.maxEnergy, currentEnergy)));\r\n        this.currentEnergy = currentEnergy;\r\n\r\n        console.log('Energy updated:', this.currentEnergy);\r\n\r\n        const progress = currentEnergy / this.maxEnergy;\r\n        this.energyProgressBar.progress = progress;\r\n\r\n        this.energyValueLabel.string = `${currentEnergy}/${this.maxEnergy}`;\r\n    }\r\n\r\n    /**\r\n     * Показывает или скрывает UserInfo\r\n     * @param show Показывать или скрывать\r\n     */\r\n    showUserInfo(show: boolean) {\r\n        if (this.coinsLabel && this.energyProgressBar && this.energyValueLabel && this.boostsLabel) {\r\n            this.coinsLabel.node.active = show;\r\n            this.energyProgressBar.node.active = show;\r\n            this.energyValueLabel.node.active = show;\r\n            this.boostsLabel.node.active = show;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Отображает сообщение пользователю\r\n     * @param message Текст сообщения\r\n     * @param type Тип сообщения ('success', 'danger', 'warning', 'info')\r\n     */\r\n    showMessage(message: string, type: string = 'info') {\r\n        if (this.messagesLabel) {\r\n            this.messagesLabel.string = message;\r\n            switch (type) {\r\n                case 'success':\r\n                    this.messagesLabel.node.color = new Color(0, 255, 0);\r\n                    break;\r\n                case 'danger':\r\n                    this.messagesLabel.node.color = new Color(255, 0, 0);\r\n                    break;\r\n                case 'warning':\r\n                    this.messagesLabel.node.color = new Color(255, 165, 0);\r\n                    break;\r\n                default:\r\n                    this.messagesLabel.node.color = new Color(255, 255, 255);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Возвращает текущее значение энергии\r\n     */\r\n    getCurrentEnergy(): number {\r\n        return this.currentEnergy;\r\n    }\r\n\r\n    /**\r\n     * Возвращает текущее количество бустов\r\n     */\r\n    getCurrentBoosts(): number {\r\n        return this.currentBoosts;\r\n    }\r\n\r\n    /**\r\n     * Активирует буст\r\n     */\r\n    activateBoost() {\r\n        if (!this.socket || !this.socket.connected || !this.userId) {\r\n            console.error('Не удалось использовать буст: сокет не подключен или userId не установлен.');\r\n            return;\r\n        }\r\n        this.socket.emit('useBoost', { userId: this.userId });\r\n        console.log('Буст активирован.');\r\n    }\r\n\r\n    /**\r\n     * Обработчик события \"tap\"\r\n     */\r\n    onTap() {\r\n        console.log('Current energy in onTap:', this.currentEnergy);\r\n\r\n        if (!this.userId) {\r\n            this.showMessage('Пользователь не подключен.', 'danger');\r\n            return;\r\n        }\r\n        if (this.currentEnergy < 13) {\r\n            this.showMessage('Не хватает энергии для тапа.', 'warning');\r\n            return;\r\n        }\r\n        if (this.socket && this.socket.connected) {\r\n            this.socket.emit('tap', { userId: this.userId });\r\n            this.showMessage('Тап отправлен!', 'info');\r\n        } else {\r\n            this.showMessage('Соединение с сервером отсутствует.', 'danger');\r\n        }\r\n    }\r\n}\r\n"]}