{"version":3,"sources":["file:///C:/GitHub/cocos-misapat/assets/animations/lion/SpineController.ts.ts"],"names":["_decorator","Component","Node","UITransform","Prefab","instantiate","Vec3","sp","SocketManager","ccclass","property","SpineController","Skeleton","onLoad","uiTransform","getComponent","addComponent","setContentSize","setAnchorPoint","node","on","EventType","TOUCH_END","onSpineClicked","spine","setAnimation","setCompleteListener","onAnimationComplete","bind","console","warn","event","socketManager","currentEnergy","getCurrentEnergy","addAnimation","onTap","tapPosition","getUILocation","spawnFloatingText","showMessage","entry","trackIndex","floatingTextPrefab","canvas","scene","getChildByName","canvasUITransform","canvasSize","contentSize","localPosX","x","width","localPosY","y","height","localPos","floatingText","setParent","setPosition"],"mappings":"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","sourcesContent":["// assets/animations/lion/SpineController.ts\r\n\r\nimport {\r\n  _decorator,\r\n  Component,\r\n  Node,\r\n  EventTouch,\r\n  UITransform,\r\n  Prefab,\r\n  instantiate,\r\n  Vec2,\r\n  Vec3,\r\n  sp,\r\n} from \"cc\";\r\nimport { SocketManager } from \"../../scripts/SocketManager\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"SpineController\")\r\nexport class SpineController extends Component {\r\n  @property(sp.Skeleton)\r\n  spine: sp.Skeleton = null;\r\n\r\n  @property(SocketManager)\r\n  socketManager: SocketManager = null;\r\n\r\n  @property(Prefab)\r\n  floatingTextPrefab: Prefab = null; // Ссылка на префаб FloatingText\r\n\r\n  onLoad() {\r\n    // Убедимся, что компонент UITransform присутствует\r\n    let uiTransform = this.getComponent(UITransform);\r\n    if (!uiTransform) {\r\n      uiTransform = this.addComponent(UITransform);\r\n    }\r\n    // Устанавливаем размер контента (замените на реальные размеры вашей анимации)\r\n    uiTransform.setContentSize(4000, 3000);\r\n    uiTransform.setAnchorPoint(0.553265, 0.004952);\r\n\r\n    // Добавляем обработчик на событие касания непосредственно на узел Spine-анимации\r\n    this.node.on(Node.EventType.TOUCH_END, this.onSpineClicked, this);\r\n\r\n    if (this.spine) {\r\n      // Устанавливаем основную анимацию на треке 0\r\n      this.spine.setAnimation(0, \"Основная\", true);\r\n\r\n      // Устанавливаем слушатель завершения анимации\r\n      this.spine.setCompleteListener(this.onAnimationComplete.bind(this));\r\n    } else {\r\n      console.warn(\"Spine компонент не установлен в SpineController.\");\r\n    }\r\n  }\r\n\r\n  onSpineClicked(event: EventTouch) {\r\n    // Проверяем, установлен ли SocketManager\r\n    if (this.socketManager) {\r\n      const currentEnergy = this.socketManager.getCurrentEnergy();\r\n\r\n      // Проверяем, достаточно ли энергии для тапа (13 и больше)\r\n      if (currentEnergy >= 13) {\r\n        // Если энергии достаточно, выполняем анимацию и отправляем событие тапа\r\n\r\n        if (this.spine) {\r\n          // Устанавливаем анимацию 'Нажатие' на треке 1\r\n          this.spine.setAnimation(1, \"Нажатие\", false);\r\n          // Добавляем возврат к основной анимации после завершения 'Нажатие'\r\n          this.spine.addAnimation(1, \"Основная\", true, 0);\r\n        }\r\n\r\n        // Вызываем метод onTap() из SocketManager\r\n        this.socketManager.onTap();\r\n\r\n        // Создаём и анимируем всплывающий текст\r\n        const tapPosition = event.getUILocation(); // Vec2\r\n        this.spawnFloatingText(tapPosition);\r\n      } else {\r\n        // Если энергии недостаточно, выводим сообщение и не запускаем анимацию\r\n        this.socketManager.showMessage(\r\n          \"Не хватает энергии для тапа.\",\r\n          \"warning\"\r\n        );\r\n      }\r\n    } else {\r\n      console.warn(\"SocketManager не установлен в SpineController.\");\r\n    }\r\n  }\r\n\r\n  onAnimationComplete(entry: sp.spine.TrackEntry) {\r\n    if (entry && entry.trackIndex === 1) {\r\n      // После завершения анимации 'Нажатие' возвращаемся к 'Основная'\r\n      this.spine.setAnimation(1, \"Основная\", true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Создаёт и анимирует всплывающий текст \"+13\" в месте тапа\r\n   * @param tapPosition Позиция тапа в координатах экрана (Vec2)\r\n   */\r\n  spawnFloatingText(tapPosition: Vec2) {\r\n    if (!this.floatingTextPrefab) {\r\n      console.warn(\"floatingTextPrefab не установлен в SpineController.\");\r\n      return;\r\n    }\r\n\r\n    // Получаем Canvas\r\n    const canvas = this.node.scene.getChildByName(\"Canvas\");\r\n    if (!canvas) {\r\n      console.warn(\"Canvas не найден.\");\r\n      return;\r\n    }\r\n\r\n    // Получаем размер Canvas\r\n    const canvasUITransform = canvas.getComponent(UITransform);\r\n    if (!canvasUITransform) {\r\n      console.warn(\"UITransform не найден на Canvas.\");\r\n      return;\r\n    }\r\n    const canvasSize = canvasUITransform.contentSize;\r\n\r\n    // Преобразуем позицию тапа из экранных координат в локальные координаты Canvas\r\n    const localPosX = tapPosition.x - canvasSize.width / 2;\r\n    const localPosY = tapPosition.y - canvasSize.height / 2;\r\n    const localPos = new Vec3(localPosX, localPosY, 100);\r\n\r\n    // Создаём экземпляр префаба\r\n    const floatingText = instantiate(this.floatingTextPrefab);\r\n    floatingText.setParent(canvas); // Устанавливаем родителем Canvas\r\n\r\n    // Устанавливаем позицию всплывающего текста относительно Canvas\r\n    floatingText.setPosition(localPos);\r\n\r\n    // Запускаем анимацию (скрипт FloatingText.ts уже запускает анимацию в методе start)\r\n  }\r\n}\r\n"]}