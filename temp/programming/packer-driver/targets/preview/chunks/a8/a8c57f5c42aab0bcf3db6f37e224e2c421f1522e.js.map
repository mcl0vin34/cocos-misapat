{"version":3,"sources":["file:///C:/GitHub/cocos-misapat/assets/scripts/BoostController.ts"],"names":["_decorator","Component","Node","Label","Vec3","Color","tween","SocketManager","ccclass","property","BoostController","initialPosition","onLoad","node","on","EventType","TOUCH_END","onBoostClicked","notificationLabel","active","position","clone","console","error","event","socketManager","currentEnergy","getCurrentEnergy","currentBoosts","getCurrentBoosts","showNotification","log","activateBoost","warn","message","string","color","setPosition","to","animationDuration","start","by","moveUpDistance","call"],"mappings":"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","sourcesContent":["// assets/scripts/BoostController.ts\r\n\r\nimport { _decorator, Component, Node, EventTouch, Label, Vec3, Color, tween } from 'cc';\r\nimport { SocketManager } from './SocketManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BoostController')\r\nexport class BoostController extends Component {\r\n    @property(SocketManager)\r\n    socketManager: SocketManager = null; // Ссылка на SocketManager\r\n\r\n    @property(Label)\r\n    notificationLabel: Label = null; // Метка для уведомления\r\n\r\n    @property\r\n    animationDuration: number = 1.5; // Длительность анимации в секундах\r\n\r\n    @property\r\n    moveUpDistance: number = 50; // Расстояние подъёма уведомления\r\n\r\n    private initialPosition: Vec3 = new Vec3();\r\n\r\n    onLoad() {\r\n        // Добавляем обработчик на событие касания на узел\r\n        this.node.on(Node.EventType.TOUCH_END, this.onBoostClicked, this);\r\n\r\n        // Инициализируем уведомление как скрытое и сохраняем начальную позицию\r\n        if (this.notificationLabel) {\r\n            this.notificationLabel.node.active = false; // Скрыть уведомление по умолчанию\r\n            this.initialPosition = this.notificationLabel.node.position.clone();\r\n        } else {\r\n            console.error('notificationLabel не назначен в BoostController.');\r\n        }\r\n    }\r\n\r\n    onBoostClicked(event: EventTouch) {\r\n        if (this.socketManager) {\r\n            const currentEnergy = this.socketManager.getCurrentEnergy();\r\n            const currentBoosts = this.socketManager.getCurrentBoosts();\r\n\r\n            if (currentBoosts <= 0) {\r\n                // Нет доступных бустов\r\n                this.showNotification('Бустеры кончились!');\r\n                console.log('No boosts left.');\r\n                return;\r\n            }\r\n\r\n            if (currentEnergy >= 300) {\r\n                // Энергии достаточно, буст не активируем\r\n                this.showNotification('Слишком много энергии!');\r\n                console.log('Energy is 300 or more, boost not activated.');\r\n                return;\r\n            }\r\n\r\n            // Если энергии меньше 300 и есть бусты, активируем буст\r\n            this.socketManager.activateBoost();\r\n\r\n            // Отобразим уведомление \"Энергия восстановлена!\"\r\n            this.showNotification('Энергия восстановлена!');\r\n        } else {\r\n            console.warn('SocketManager is not assigned in BoostController.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Отображает уведомление с анимацией\r\n     * @param message Текст уведомления\r\n     */\r\n    showNotification(message: string) {\r\n        if (this.notificationLabel) {\r\n            this.notificationLabel.string = message;\r\n            this.notificationLabel.node.active = true;\r\n\r\n            // Убедимся, что цвет и позиция инициализированы правильно\r\n            this.notificationLabel.color = new Color(255, 255, 255, 255);\r\n            this.notificationLabel.node.setPosition(this.initialPosition.clone());\r\n\r\n            // Анимация для цвета: плавное исчезновение\r\n            tween(this.notificationLabel)\r\n                .to(this.animationDuration, { color: new Color(255, 255, 255, 0) })\r\n                .start();\r\n\r\n            // Анимация для позиции: подъем вверх\r\n            tween(this.notificationLabel.node)\r\n                .by(this.animationDuration, { position: new Vec3(0, this.moveUpDistance, 0) })\r\n                .call(() => {\r\n                    this.notificationLabel.node.active = false; // Скрыть уведомление после анимации\r\n                    // Восстановить первоначальный цвет и позицию для будущих уведомлений\r\n                    this.notificationLabel.color = new Color(255, 255, 255, 255);\r\n                    this.notificationLabel.node.setPosition(this.initialPosition.clone());\r\n                })\r\n                .start();\r\n        } else {\r\n            console.warn('notificationLabel is not assigned in BoostController.');\r\n        }\r\n    }\r\n}\r\n"]}