{"version":3,"sources":["file:///D:/simatap_frontend/assets/scripts/LeadersPage.ts"],"names":["_decorator","Component","ScrollView","Prefab","instantiate","Label","ccclass","property","LeaderBoardPage","userId","start","fetchLeaders","response","fetch","apiBaseUrl","ok","status","console","warn","Error","data","json","log","populateLeadersList","top50","currentUser","displayCurrentUser","scrollView","scrollToTop","error","leaders","content","length","removeAllChildren","forEach","leader","index","rank","leaderItem","leaderItemPrefab","parent","labels","getComponentsInChildren","numberLabel","usernameLabel","coinsLabel","label","nodeName","node","name","string","username","formatCoins","coins","map","user","currentRankLabel","currentUsernameLabel","currentCoinsLabel","millions","Math","round","toLocaleString"],"mappings":"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","sourcesContent":["// assets/scripts/LeaderBoard/LeaderBoardPage.ts\r\n\r\nimport { _decorator, Component, ScrollView, Prefab, instantiate, Label, Vec3, Color } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n// Интерфейс для Лидера\r\ninterface LeaderboardUser {\r\n    rank: number;\r\n    username: string;\r\n    coins: number;\r\n    isCurrentUser: boolean;\r\n}\r\n\r\n// Интерфейс для ответа API\r\ninterface ApiResponse {\r\n    top50: LeaderboardUser[];\r\n    currentUser: LeaderboardUser | null;\r\n}\r\n\r\n@ccclass('LeaderBoardPage')\r\nexport class LeaderBoardPage extends Component {\r\n    @property(ScrollView)\r\n    scrollView: ScrollView = null;\r\n\r\n    @property(Prefab)\r\n    leaderItemPrefab: Prefab = null;\r\n\r\n    // Удаляем свойство totalLeadersLabel\r\n    // @property(Label)\r\n    // totalLeadersLabel: Label = null;\r\n\r\n    // Добавляем новые свойства для текущего игрока\r\n    @property(Label)\r\n    currentRankLabel: Label = null;\r\n\r\n    @property(Label)\r\n    currentUsernameLabel: Label = null;\r\n\r\n    @property(Label)\r\n    currentCoinsLabel: Label = null;\r\n\r\n    @property\r\n    apiBaseUrl: string = 'https://dev.simatap.ru/api/users/leaders';\r\n\r\n    private userId: number = 777270195; // Замените на актуальный userId или получите его из других источников\r\n\r\n    start() {\r\n        this.fetchLeaders();\r\n    }\r\n\r\n    /**\r\n     * Получает список лидеров из API\r\n     */\r\n    async fetchLeaders() {\r\n        try {\r\n            const response = await fetch(`${this.apiBaseUrl}?userId=${this.userId}`);\r\n            if (!response.ok) {\r\n                if (response.status === 404) {\r\n                    // Если топ-лидеров нет, можно скрыть список или показать сообщение\r\n                    console.warn('Топ-лидеров пока нет.');\r\n                    return;\r\n                }\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const data: ApiResponse = await response.json();\r\n            console.log('Fetched leaderboard data:', data);\r\n            // Убираем строку с общим количеством лидеров\r\n            // this.totalLeadersLabel.string = `Топ-50 лидеров: ${data.top50.length}`;\r\n            this.populateLeadersList(data.top50);\r\n\r\n            // Отображаем информацию о текущем игроке\r\n            if (data.currentUser) {\r\n                this.displayCurrentUser(data.currentUser);\r\n            }\r\n\r\n            // Прокрутка ScrollView к началу после заполнения списка\r\n            if (this.scrollView) {\r\n                this.scrollView.scrollToTop(0, false);\r\n                // Альтернативный способ:\r\n                // this.scrollView.content.setPosition(new Vec3(0, 0, 0));\r\n            }\r\n        } catch (error) {\r\n            console.error('Ошибка при загрузке списка лидеров:', error);\r\n            // Убираем строку с общим количеством лидеров и показываем ошибку\r\n            // if (this.totalLeadersLabel) {\r\n            //     this.totalLeadersLabel.string = 'Не удалось загрузить список лидеров.';\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Заполняет ScrollView списком лидеров\r\n     * @param leaders Список лидеров\r\n     */\r\n    populateLeadersList(leaders: LeaderboardUser[]) {\r\n        const content = this.scrollView.content;\r\n        console.log('Populating leaderboard list with', leaders.length, 'leaders.');\r\n\r\n        // Очистить предыдущие элементы\r\n        content.removeAllChildren();\r\n\r\n        leaders.forEach((leader, index) => {\r\n            console.log(`Adding leader ${leader.rank}:`, leader);\r\n            const leaderItem = instantiate(this.leaderItemPrefab);\r\n            leaderItem.parent = content;\r\n\r\n            // Получить все Label компоненты в leaderItem\r\n            const labels = leaderItem.getComponentsInChildren(Label);\r\n            console.log(`Found ${labels.length} Label components in LeaderItem.`);\r\n\r\n            let numberLabel: Label = null;\r\n            let usernameLabel: Label = null;\r\n            let coinsLabel: Label = null;\r\n\r\n            labels.forEach(label => {\r\n                const nodeName = label.node.name;\r\n                if (nodeName === 'NumberLabel') { // Используем NumberLabel\r\n                    numberLabel = label;\r\n                } else if (nodeName === 'UsernameLabel') {\r\n                    usernameLabel = label;\r\n                } else if (nodeName === 'CoinsLabel') {\r\n                    coinsLabel = label;\r\n                }\r\n            });\r\n\r\n            if (numberLabel && usernameLabel && coinsLabel) {\r\n                numberLabel.string = `#${leader.rank}`;\r\n                usernameLabel.string = leader.username;\r\n                coinsLabel.string = this.formatCoins(leader.coins);\r\n                console.log(`Set Number: ${leader.rank}, Username: ${leader.username}, Coins: ${leader.coins}`);\r\n            } else {\r\n                console.warn('Не удалось найти один из Label компонентов в LeaderItem');\r\n                console.log('Найденные Label узлы:', labels.map(label => label.node.name));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Отображает информацию о текущем игроке в отдельных метках\r\n     * @param user Информация о текущем игроке\r\n     */\r\n    displayCurrentUser(user: LeaderboardUser) {\r\n        if (this.currentRankLabel) {\r\n            this.currentRankLabel.string = `#${user.rank}`;\r\n        } else {\r\n            console.warn('currentRankLabel не назначен в LeaderBoardPage.');\r\n        }\r\n\r\n        if (this.currentUsernameLabel) {\r\n            this.currentUsernameLabel.string = `${user.username}`;\r\n        } else {\r\n            console.warn('currentUsernameLabel не назначен в LeaderBoardPage.');\r\n        }\r\n\r\n        if (this.currentCoinsLabel) {\r\n            this.currentCoinsLabel.string = `${this.formatCoins(user.coins)}`;\r\n        } else {\r\n            console.warn('currentCoinsLabel не назначен в LeaderBoardPage.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Форматирует количество монет.\r\n     * Если монет >= 1,000,000, отображает в миллионах с буквой \"M\" без пробела.\r\n     * Иначе, отображает количество монет с разделителями тысяч и округляет до целого числа.\r\n     * @param coins Количество монет\r\n     * @returns Отформатированная строка\r\n     */\r\n    formatCoins(coins: number): string {\r\n        if (coins >= 1_000_000) {\r\n            const millions = Math.round(coins / 1_000_000);\r\n            return `${millions}M`;\r\n        } else {\r\n            return Math.round(coins).toLocaleString('ru-RU'); // Указываем локаль для правильного форматирования\r\n        }\r\n    }\r\n}\r\n"]}