{"version":3,"sources":["file:///D:/simatap_frontend/assets/scripts/IncomeManager.ts"],"names":["_decorator","Component","Label","ccclass","property","IncomeManager","apiUrl","start","incomeLabel","console","error","fetchIncomeData","response","fetch","ok","Error","status","data","json","totalIncome","calculateTotalIncome","formattedIncome","formatIncome","updateIncomeLabel","log","upgrades","reduce","sum","upgrade","cumulative_income","income","toFixed","text","string"],"mappings":";;;;;;;;;;;;;;;;;;;;AAESA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;;;;;qFAFhC;;;;;OAGM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;+BAejBK,a,WADZF,OAAO,CAAC,eAAD,C,UAEHC,QAAQ,CAACF,KAAD,C,2BAFb,MACaG,aADb,SACmCJ,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAEd;AAFc,eAIjCK,MAJiC,GAIhB,sDAJgB;AAAA;;AAMzCC,QAAAA,KAAK,GAAG;AACJ,cAAI,CAAC,KAAKC,WAAV,EAAuB;AACnBC,YAAAA,OAAO,CAACC,KAAR,CAAc,0CAAd;AACA;AACH;;AAED,eAAKC,eAAL;AACH;AAED;AACJ;AACA;;;AACUA,QAAAA,eAAe,GAAG;AAAA;;AAAA;AACpB,gBAAI;AACA,kBAAMC,QAAQ,SAASC,KAAK,CAAC,KAAI,CAACP,MAAN,CAA5B;;AACA,kBAAI,CAACM,QAAQ,CAACE,EAAd,EAAkB;AACd,sBAAM,IAAIC,KAAJ,0BAAiCH,QAAQ,CAACI,MAA1C,CAAN;AACH;;AAED,kBAAMC,IAAe,SAASL,QAAQ,CAACM,IAAT,EAA9B;;AACA,kBAAMC,WAAW,GAAG,KAAI,CAACC,oBAAL,CAA0BH,IAA1B,CAApB;;AACA,kBAAMI,eAAe,GAAG,KAAI,CAACC,YAAL,CAAkBH,WAAlB,CAAxB;;AAEA,cAAA,KAAI,CAACI,iBAAL,CAAuBF,eAAvB;;AACAZ,cAAAA,OAAO,CAACe,GAAR,qEAA4BH,eAA5B;AACH,aAZD,CAYE,OAAOX,KAAP,EAAc;AACZD,cAAAA,OAAO,CAACC,KAAR,CAAc,oCAAd,EAAoDA,KAApD;;AACA,cAAA,KAAI,CAACa,iBAAL,CAAuB,iBAAvB,EAFY,CAE+B;;AAC9C;AAhBmB;AAiBvB;AAED;AACJ;AACA;AACA;AACA;;;AACIH,QAAAA,oBAAoB,CAACK,QAAD,EAA8B;AAC9C,iBAAOA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,OAAN,KAAkBD,GAAG,IAAIC,OAAO,CAACC,iBAAR,IAA6B,CAAjC,CAArC,EAA0E,CAA1E,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIP,QAAAA,YAAY,CAACQ,MAAD,EAAyB;AACjC,cAAIA,MAAM,IAAI,IAAd,EAAoB;AAChB,0BAAY,CAACA,MAAM,GAAG,IAAV,EAAgBC,OAAhB,CAAwB,CAAxB,CAAZ;AACH;;AACD,wBAAYD,MAAZ;AACH;AAED;AACJ;AACA;AACA;;;AACIP,QAAAA,iBAAiB,CAACS,IAAD,EAAe;AAC5B,eAAKxB,WAAL,CAAiByB,MAAjB,GAA0BD,IAA1B;AACH;;AAhEwC,O;;;;;iBAEpB,I","sourcesContent":["// assets/scripts/Income/IncomeManager.ts\r\n\r\nimport { _decorator, Component, Label, Vec3, Color, tween, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\ninterface Upgrade {\r\n    upgrade_id: number;\r\n    name: string;\r\n    description: string;\r\n    url: string;\r\n    current_level: number;\r\n    next_level: number | null;\r\n    next_level_cost: number | null;\r\n    income_increase_per_level: number;\r\n    cumulative_income: number;\r\n}\r\n\r\n@ccclass('IncomeManager')\r\nexport class IncomeManager extends Component {\r\n    @property(Label)\r\n    incomeLabel: Label = null; // Метка для отображения суммы дохода\r\n\r\n    private apiUrl: string = 'https://dev.simatap.ru/api/upgrades?userId=422840434';\r\n\r\n    start() {\r\n        if (!this.incomeLabel) {\r\n            console.error('incomeLabel не назначен в IncomeManager.');\r\n            return;\r\n        }\r\n\r\n        this.fetchIncomeData();\r\n    }\r\n\r\n    /**\r\n     * Получает данные с API и обновляет метку дохода\r\n     */\r\n    async fetchIncomeData() {\r\n        try {\r\n            const response = await fetch(this.apiUrl);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data: Upgrade[] = await response.json();\r\n            const totalIncome = this.calculateTotalIncome(data);\r\n            const formattedIncome = this.formatIncome(totalIncome);\r\n\r\n            this.updateIncomeLabel(formattedIncome);\r\n            console.log(`Общий доход: ${formattedIncome}`);\r\n        } catch (error) {\r\n            console.error('Ошибка при получении данных с API:', error);\r\n            this.updateIncomeLabel('+ 0 доход в час'); // Устанавливаем 0 доход в случае ошибки\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Складывает cumulative_income всех объектов\r\n     * @param upgrades Массив объектов Upgrade\r\n     * @returns Общая сумма дохода\r\n     */\r\n    calculateTotalIncome(upgrades: Upgrade[]): number {\r\n        return upgrades.reduce((sum, upgrade) => sum + (upgrade.cumulative_income || 0), 0);\r\n    }\r\n\r\n    /**\r\n     * Форматирует сумму до тысяч с добавлением 'K' и префикса '+', суффикса 'доход в час'\r\n     * @param income Сумма дохода\r\n     * @returns Форматированная строка\r\n     */\r\n    formatIncome(income: number): string {\r\n        if (income >= 1000) {\r\n            return `+ ${(income / 1000).toFixed(0)}K доход в час`;\r\n        }\r\n        return `+ ${income} доход в час`;\r\n    }\r\n\r\n    /**\r\n     * Обновляет текст метки дохода\r\n     * @param text Текст для отображения\r\n     */\r\n    updateIncomeLabel(text: string) {\r\n        this.incomeLabel.string = text;\r\n    }\r\n}\r\n"]}