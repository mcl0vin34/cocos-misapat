{"version":3,"sources":["file:///C:/GitHub/cocos-misapat/assets/scripts/ReferralLinkManager.ts"],"names":["_decorator","Component","Node","Label","Vec3","Color","tween","SocketManager","ccclass","property","ReferralLinkManager","referralLink","initialPosition","start","copyLinkNode","console","error","referralLinkLabel","copyNotificationLabel","generateReferralLink","on","EventType","TOUCH_END","onCopyLinkClicked","active","node","position","clone","generateLinkNode","onGenerateLinkClicked","instance","userId","getUserId","getReferralLink","string","log","color","setPosition","to","animationDuration","by","moveUpDistance","call","warn","navigator","clipboard","writeText","err"],"mappings":"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","sourcesContent":["// assets/scripts/Referral/ReferralLinkManager.ts\r\n\r\nimport { _decorator, Component, Node, Label, Vec3, Color, tween } from \"cc\";\r\nimport { SocketManager } from \"./SocketManager\"; // Импортируйте SocketManager\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"ReferralLinkManager\")\r\nexport class ReferralLinkManager extends Component {\r\n  @property(Node)\r\n  generateLinkNode: Node = null; // Нода для создания ссылки (если нужна)\r\n\r\n  @property(Node)\r\n  copyLinkNode: Node = null; // Нода для копирования ссылки\r\n\r\n  @property(Label)\r\n  referralLinkLabel: Label = null; // Метка для отображения ссылки\r\n\r\n  @property(Label)\r\n  copyNotificationLabel: Label = null; // Метка для уведомления о копировании\r\n\r\n  private referralLink: string = \"\";\r\n\r\n  // Параметры анимации\r\n  @property\r\n  animationDuration: number = 1.5; // Продолжительность анимации в секундах\r\n\r\n  @property\r\n  moveUpDistance: number = 300; // Расстояние, на которое уведомление будет подниматься\r\n\r\n  private initialPosition: Vec3 = new Vec3();\r\n\r\n  start() {\r\n    // Проверка наличия всех нод\r\n    if (!this.copyLinkNode) {\r\n      console.error(\"copyLinkNode не назначен в ReferralLinkManager.\");\r\n    }\r\n    if (!this.referralLinkLabel) {\r\n      console.error(\"referralLinkLabel не назначен в ReferralLinkManager.\");\r\n    }\r\n    if (!this.copyNotificationLabel) {\r\n      console.error(\"copyNotificationLabel не назначен в ReferralLinkManager.\");\r\n    }\r\n\r\n    // Генерируем ссылку автоматически при старте\r\n    this.generateReferralLink();\r\n\r\n    // Назначаем обработчик нажатия на ноду \"Копировать ссылку\"\r\n    if (this.copyLinkNode) {\r\n      this.copyLinkNode.on(\r\n        Node.EventType.TOUCH_END,\r\n        this.onCopyLinkClicked,\r\n        this\r\n      );\r\n      this.copyLinkNode.active = true; // Сделать кнопку копирования всегда видимой\r\n    }\r\n\r\n    // Инициализируем уведомление как скрытое и сохраняем начальную позицию\r\n    if (this.copyNotificationLabel) {\r\n      this.copyNotificationLabel.node.active = false; // Скрыть уведомление по умолчанию\r\n      this.initialPosition = this.copyNotificationLabel.node.position.clone();\r\n    }\r\n\r\n    // Если у вас всё ещё есть кнопка \"Создать ссылку\" и она нужна:\r\n    if (this.generateLinkNode) {\r\n      this.generateLinkNode.on(\r\n        Node.EventType.TOUCH_END,\r\n        this.onGenerateLinkClicked,\r\n        this\r\n      );\r\n      // Опционально: можно скрыть кнопку, если ссылка генерируется автоматически\r\n      // this.generateLinkNode.active = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Генерирует реферальную ссылку автоматически при старте\r\n   */\r\n  generateReferralLink() {\r\n    if (!SocketManager.instance) {\r\n      console.error(\"SocketManager не инициализирован.\");\r\n      return;\r\n    }\r\n\r\n    const userId = SocketManager.instance.getUserId();\r\n    if (!userId) {\r\n      console.error(\"userId не установлен в SocketManager.\");\r\n      return;\r\n    }\r\n\r\n    this.referralLink = this.getReferralLink(userId);\r\n    this.referralLinkLabel.string = this.referralLink;\r\n    console.log(`Реферальная ссылка создана: ${this.referralLink}`);\r\n  }\r\n\r\n  /**\r\n   * Обработчик нажатия на ноду \"Создать ссылку\"\r\n   * (Если необходимо оставить возможность генерации ссылки вручную)\r\n   */\r\n  onGenerateLinkClicked() {\r\n    this.generateReferralLink();\r\n  }\r\n\r\n  /**\r\n   * Генерирует реферальную ссылку на основе user_id\r\n   * @param userId ID пользователя\r\n   * @returns Реферальная ссылка\r\n   */\r\n  getReferralLink(userId: number): string {\r\n    return `https://t.me/misapatStage_bot?startapp=refId${userId}`;\r\n  }\r\n\r\n  /**\r\n   * Обработчик нажатия на ноду \"Копировать ссылку\"\r\n   */\r\n  async onCopyLinkClicked() {\r\n    // Запускаем анимацию уведомления сразу при нажатии на кнопку\r\n    if (this.copyNotificationLabel) {\r\n      this.copyNotificationLabel.node.active = true;\r\n\r\n      // Убедимся, что цвет и позиция инициализированы правильно\r\n      this.copyNotificationLabel.color = new Color(255, 255, 255, 255);\r\n      this.copyNotificationLabel.node.setPosition(this.initialPosition.clone());\r\n\r\n      // Анимация для цвета: плавное исчезновение\r\n      tween(this.copyNotificationLabel)\r\n        .to(this.animationDuration, { color: new Color(255, 255, 255, 0) })\r\n        .start();\r\n\r\n      // Анимация для позиции: подъем вверх\r\n      tween(this.copyNotificationLabel.node)\r\n        .by(this.animationDuration, {\r\n          position: new Vec3(0, this.moveUpDistance, 0),\r\n        })\r\n        .call(() => {\r\n          this.copyNotificationLabel.node.active = false; // Скрыть уведомление после анимации\r\n          // Восстановить первоначальный цвет и позицию для будущих уведомлений\r\n          this.copyNotificationLabel.color = new Color(255, 255, 255, 255);\r\n          this.copyNotificationLabel.node.setPosition(\r\n            this.initialPosition.clone()\r\n          );\r\n        })\r\n        .start();\r\n    }\r\n\r\n    // Выполняем копирование ссылки\r\n    if (!this.referralLink) {\r\n      console.warn(\"Реферальная ссылка не создана.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await navigator.clipboard.writeText(this.referralLink);\r\n      console.log(\"Реферальная ссылка скопирована в буфер обмена.\");\r\n    } catch (err) {\r\n      console.error(\"Не удалось скопировать ссылку: \", err);\r\n      // Можно добавить уведомление об ошибке, если необходимо\r\n    }\r\n  }\r\n}\r\n"]}