{"version":3,"sources":["file:///C:/GitHub/cocos-misapat/assets/scripts/FriendsPage.ts"],"names":["_decorator","Component","ScrollView","Prefab","instantiate","Label","SocketManager","ccclass","property","FriendsPage","hasFetchedFriends","start","instance","console","error","totalFriendsLabel","string","on","onUserInitialized","userId","getUserId","fetchFriends","onDestroy","off","response","fetch","apiBaseUrl","ok","status","Error","friends","json","log","length","populateFriendsList","content","scrollView","removeAllChildren","forEach","friend","index","friendItem","friendItemPrefab","parent","labels","getComponentsInChildren","usernameLabel","numberLabel","coinsLabel","label","nodeName","node","name","username","formatCoins","coins","warn","map","millions","Math","round","toLocaleString"],"mappings":"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","sourcesContent":["// assets/scripts/FriendsPage.ts\r\n\r\nimport {\r\n  _decorator,\r\n  Component,\r\n  ScrollView,\r\n  Prefab,\r\n  instantiate,\r\n  Label,\r\n} from \"cc\";\r\nimport { SocketManager } from \"./SocketManager\"; // Импортируйте SocketManager\r\nconst { ccclass, property } = _decorator;\r\n\r\n// Интерфейс для Друга\r\ninterface Friend {\r\n  username: string;\r\n  coins: number;\r\n}\r\n\r\n@ccclass(\"FriendsPage\")\r\nexport class FriendsPage extends Component {\r\n  @property(ScrollView)\r\n  scrollView: ScrollView = null;\r\n\r\n  @property(Prefab)\r\n  friendItemPrefab: Prefab = null;\r\n\r\n  @property(Label)\r\n  totalFriendsLabel: Label = null;\r\n\r\n  @property\r\n  apiBaseUrl: string = \"https://dev.simatap.ru/api/referrals\";\r\n\r\n  private hasFetchedFriends: boolean = false; // Флаг, чтобы избежать повторных вызовов\r\n\r\n  start() {\r\n    // Убедитесь, что SocketManager инициализирован\r\n    if (!SocketManager.instance) {\r\n      console.error(\"SocketManager не инициализирован.\");\r\n      this.totalFriendsLabel.string = \"Ошибка инициализации.\";\r\n      return;\r\n    }\r\n\r\n    // Подпишитесь на событие завершения инициализации пользователя\r\n    SocketManager.instance.on(\"userInitialized\", this.onUserInitialized, this);\r\n\r\n    // Дополнительная проверка на случай, если пользователь уже инициализирован\r\n    const userId = SocketManager.instance.getUserId();\r\n    if (userId) {\r\n      this.fetchFriends();\r\n      this.hasFetchedFriends = true;\r\n    }\r\n  }\r\n\r\n  onDestroy() {\r\n    // Отписка от события при уничтожении компонента\r\n    if (SocketManager.instance) {\r\n      SocketManager.instance.off(\r\n        \"userInitialized\",\r\n        this.onUserInitialized,\r\n        this\r\n      );\r\n    }\r\n  }\r\n\r\n  onUserInitialized() {\r\n    if (!this.hasFetchedFriends) {\r\n      this.fetchFriends();\r\n      this.hasFetchedFriends = true;\r\n    }\r\n  }\r\n\r\n  async fetchFriends() {\r\n    const userId = SocketManager.instance.getUserId();\r\n    if (!userId) {\r\n      console.error(\"userId не установлен в SocketManager.\");\r\n      this.totalFriendsLabel.string = \"Неизвестный пользователь.\";\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${this.apiBaseUrl}/${userId}`);\r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          this.totalFriendsLabel.string = `У тебя пока нет друзей`;\r\n          return;\r\n        }\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const friends: Friend[] = await response.json();\r\n      console.log(\"Fetched friends:\", friends);\r\n      this.totalFriendsLabel.string = `У тебя ${friends.length} друзей`;\r\n      this.populateFriendsList(friends);\r\n    } catch (error) {\r\n      console.error(\"Ошибка при загрузке списка друзей:\", error);\r\n      this.totalFriendsLabel.string = \"Не удалось загрузить список друзей.\";\r\n    }\r\n  }\r\n\r\n  populateFriendsList(friends: Friend[]) {\r\n    const content = this.scrollView.content;\r\n    console.log(\"Populating friends list with\", friends.length, \"friends.\");\r\n\r\n    // Очистить предыдущие элементы\r\n    content.removeAllChildren();\r\n\r\n    friends.forEach((friend, index) => {\r\n      console.log(`Adding friend ${index + 1}:`, friend);\r\n      const friendItem = instantiate(this.friendItemPrefab);\r\n      friendItem.parent = content;\r\n\r\n      // Получить все Label компоненты в friendItem\r\n      const labels = friendItem.getComponentsInChildren(Label);\r\n      console.log(`Found ${labels.length} Label components in FriendItem.`);\r\n\r\n      let usernameLabel: Label = null;\r\n      let numberLabel: Label = null;\r\n      let coinsLabel: Label = null;\r\n\r\n      labels.forEach((label) => {\r\n        const nodeName = label.node.name;\r\n        if (nodeName === \"UsernameLabel\") {\r\n          usernameLabel = label;\r\n        } else if (nodeName === \"NumberLabel\") {\r\n          numberLabel = label;\r\n        } else if (nodeName === \"CoinsLabel\") {\r\n          coinsLabel = label;\r\n        }\r\n      });\r\n\r\n      if (usernameLabel && numberLabel && coinsLabel) {\r\n        usernameLabel.string = friend.username;\r\n        numberLabel.string = `${index + 1}.`;\r\n        coinsLabel.string = this.formatCoins(friend.coins);\r\n        console.log(\r\n          `Set Username: ${friend.username}, Number: ${index + 1}, Coins: ${\r\n            friend.coins\r\n          }`\r\n        );\r\n      } else {\r\n        console.warn(\"Не удалось найти один из Label компонентов в FriendItem\");\r\n        console.log(\r\n          \"Найденные Label узлы:\",\r\n          labels.map((label) => label.node.name)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Форматирует количество монет.\r\n   * Если монет >= 1,000,000, отображает в миллионах с буквой \"M\" без пробела.\r\n   * Иначе, отображает количество монет с разделителями тысяч и округляет до целого числа.\r\n   * @param coins Количество монет\r\n   * @returns Отформатированная строка\r\n   */\r\n  formatCoins(coins: number): string {\r\n    if (coins >= 1_000_000) {\r\n      const millions = Math.round(coins / 1_000_000);\r\n      return `${millions}M`;\r\n    } else {\r\n      return Math.round(coins).toLocaleString(\"ru-RU\"); // Указываем локаль для правильного форматирования\r\n    }\r\n  }\r\n}\r\n"]}